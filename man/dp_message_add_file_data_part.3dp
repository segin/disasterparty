." Man page for dp_message_add_file_data_part from libdisasterparty
.TH DP_MESSAGE_ADD_FILE_DATA_PART 3 "August 03, 2025" "libdisasterparty @DP_VERSION@" "Disaster Party Manual"

.SH NAME
dp_message_add_file_data_part \- add a base64 encoded file data content part to a message

.SH SYNOPSIS
.B #include <disasterparty.h>
.PP
.BI "bool dp_message_add_file_data_part(dp_message_t *" message ", const char *" mime_type ", const char *" base64_data ", const char *" filename ");"

.SH DESCRIPTION
The
.B dp_message_add_file_data_part()
function adds a new base64 encoded file data content part to an existing
.BR dp_message_t
structure. This function enables attaching various file types including PDFs, CSVs, 
text files, and other document formats directly to messages. The file data must be 
base64 encoded before calling this function.

The provided
.I mime_type
,
.I base64_data
, and
.I filename
strings are copied into newly allocated memory. The
.I filename
parameter is optional and can be NULL, but when provided, it gives context to the 
AI model about the file.

The caller is responsible for eventually freeing the message contents using
.BR dp_free_messages (3).

.SH PARAMETERS
.TP
.I message
The message structure to modify.
.TP
.I mime_type
The MIME type of the file (e.g., "text/plain", "application/pdf", "text/csv", "application/json").
.TP
.I base64_data
The base64 encoded file data string.
.TP
.I filename
Optional filename for the file (can be NULL).

.SH SUPPORTED FILE TYPES
The function supports various file types, though provider support may vary:
.IP \(bu 2
Text files: "text/plain", "text/csv", "text/markdown"
.IP \(bu 2
Documents: "application/pdf", "application/msword"
.IP \(bu 2
Data files: "application/json", "application/xml", "text/xml"
.IP \(bu 2
Images: "image/png", "image/jpeg", "image/gif", "image/webp"
.IP \(bu 2
Archives: "application/zip" (limited support)

.SH PROVIDER-SPECIFIC BEHAVIOR
.IP \(bu 2
.B Google Gemini:
Uses inline base64 data for smaller files, may use Files API for larger files
.IP \(bu 2
.B Anthropic:
Supports inline base64 data with size limitations
.IP \(bu 2
.B OpenAI-compatible:
Limited support depending on model capabilities

.SH RETURN VALUE
Returns
.BR true
on success, and
.BR false
on error (e.g., memory allocation failure, invalid parameters).

.SH BUGS
Please report any bugs or issues by opening a ticket on the GitHub issue tracker:
.PP
.UR https://github.com/segin/disasterparty/issues
.UE

.SH AUTHOR
Kirn Gill II <segin2005@gmail.com>
.br
Gemini (Conceptualization and initial C code generation)

.SH EXAMPLE
.nf
#include <disasterparty.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    dp_message_t user_message = { .role = DP_ROLE_USER };
    
    // Example base64 encoded CSV data
    const char* csv_base64 = "TmFtZSxBZ2UsQ2l0eQpKb2huLDMwLE5ldyBZb3JrCkphbmUsNDIsU2FuIEZyYW5jaXNjbw==";
    
    if (dp_message_add_file_data_part(&user_message, "text/csv", csv_base64, "data.csv")) {
        printf("File data part added successfully.\n");
    } else {
        fprintf(stderr, "Failed to add file data part.\n");
        return 1;
    }

    // Don't forget to free the message content when done
    dp_free_messages(&user_message, 1);
    return 0;
}
.fi

.SH SEE ALSO
.BR dp_message_add_text_part (3),
.BR dp_message_add_image_url_part (3),
.BR dp_message_add_base64_image_part (3),
.BR dp_free_messages (3),
.BR disasterparty (7)