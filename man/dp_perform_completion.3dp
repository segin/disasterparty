.\" Man page for dp_perform_completion from libdisasterparty
.TH DP_PERFORM_COMPLETION 3 "August 03, 2025" "libdisasterparty @DP_VERSION@" "Disaster Party Manual"

.SH NAME
dp_perform_completion \- perform a non-streaming LLM completion request

.SH SYNOPSIS
.B #include <disasterparty.h>
.PP
.BI "int dp_perform_completion(dp_context_t *" context ", const dp_request_config_t *" request_config ", dp_response_t *" response ");"

.SH DESCRIPTION
The
.B dp_perform_completion()
function sends a request to the configured LLM provider to generate a completion
based on the provided messages and configuration. This function operates in a
non-streaming (blocking) mode, waiting for the full response from the API.

The
.I request_config
argument specifies the parameters for the request. This includes the model, messages,
temperature, and other generation controls like `top_p`, `top_k`, and `stop_sequences`.
The
.BR stream
field within
.I request_config
must be set to
.BR false
for this function.

The
.I response
argument is a pointer to a
.BR dp_response_t
structure that will be populated with the LLM's response or error information.
The caller is responsible for freeing its contents using
.BR dp_free_response_content (3)
after use, even if an error occurs.

.SH RETURN VALUE
Returns 0 on success. Returns -1 on critical errors. In all cases, the
.I response
struct should be checked for the HTTP status and any API-level error messages.

.SH BUGS
Please report any bugs or issues by opening a ticket on the GitHub issue tracker:
.PP
.UR https://github.com/segin/disasterparty/issues
.UE

.SH AUTHOR
Kirn Gill II <segin2005@gmail.com>
.br
Gemini (Conceptualization and initial C code generation)

.SH EXAMPLE
.nf
#include <disasterparty.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    const char* api_key = getenv("OPENAI_API_KEY");
    if (!api_key) {
        fprintf(stderr, "OPENAI_API_KEY not set.\n");
        return 1;
    }

    dp_context_t* context = dp_init_context(DP_PROVIDER_OPENAI_COMPATIBLE, api_key, NULL);
    if (!context) {
        fprintf(stderr, "Failed to initialize context.\n");
        return 1;
    }

    dp_message_t message = { .role = DP_ROLE_USER };
    dp_message_add_text_part(&message, "Hello, how are you?");

    dp_request_config_t config = {
        .model = "gpt-4o-mini",
        .messages = &message,
        .num_messages = 1,
        .temperature = 0.7,
        .max_tokens = 50,
        .stream = false
    };

    dp_response_t response = {0};
    int ret = dp_perform_completion(context, &config, &response);

    if (ret == 0 && response.http_status_code >= 200 && response.http_status_code < 300) {
        printf("Completion successful:\n");
        for (size_t i = 0; i < response.num_parts; ++i) {
            if (response.parts[i].text) {
                printf("%s", response.parts[i].text);
            }
        }
        printf("\n");
    } else {
        fprintf(stderr, "Completion failed: HTTP %ld, Error: %s\n",
                response.http_status_code, response.error_message ? response.error_message : "(none)");
    }

    dp_free_response_content(&response);
    dp_free_messages(&message, 1);
    dp_destroy_context(context);

    return ret == 0 ? 0 : 1;
}
.fi

.SH SEE ALSO
.BR dp_perform_streaming_completion (3),
.BR dp_free_response_content (3),
.BR dp_request_config (3),
.BR disasterparty (7)
