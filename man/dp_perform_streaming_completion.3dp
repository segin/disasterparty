.\" Man page for dp_perform_streaming_completion from libdisasterparty
.TH DP_PERFORM_STREAMING_COMPLETION 3 "July 03, 2025" "libdisasterparty @DP_VERSION@" "Disaster Party Manual"

.SH NAME
dp_perform_streaming_completion \- perform a streaming LLM completion request with a generic text callback

.SH SYNOPSIS
.B #include <disasterparty.h>
.PP
.BI "int dp_perform_streaming_completion(dp_context_t *" context ", const dp_request_config_t *" request_config ", dp_stream_callback_t " callback ", void *" user_data ", dp_response_t *" response ");"

.SH DESCRIPTION
The
.B dp_perform_streaming_completion()
function sends a request to the configured LLM provider to generate a completion
and streams the response back token by token. This function is for use cases
where only the text content of the stream is needed.

The provided
.I callback
function will be invoked multiple times with text tokens as they are received.
When used with the Anthropic provider, this function internally parses the
detailed event stream and extracts only the text for the generic callback.
To receive detailed events from Anthropic, use
.BR dp_perform_anthropic_streaming_completion (3).

For OpenAI and Anthropic,
.I request_config->stream
must be set to
.BR true .

.SH CALLBACK SIGNATURE
.nf
int (*dp_stream_callback_t)(const char* token,
                                    void* user_data,
                                    bool is_final_chunk,
                                    const char* error_during_stream);
.fi
.PP
- \fBtoken\fP: The received text chunk. NULL on the final call or if an error occurred.
- \fBuser_data\fP: User-defined data passed from the streaming call.
- \fBis_final_chunk\fP: True if this is the last content-bearing chunk or stream end signal.
- \fBerror_during_stream\fP: Error message if an error occurred during stream processing. NULL otherwise.
.PP
Return \fB0\fP to continue streaming, non-zero to attempt to stop.

.SH RETURN VALUE
Returns \fB0\fP if the stream was successfully initiated and \fB-1\fP on setup error. The \fIresponse\fP struct contains the final status.

.SH EXAMPLE
.nf
#include <disasterparty.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Simple callback to print streamed tokens
int stream_callback(const char* token, void* user_data, bool is_final_chunk, const char* error_during_stream) {
    if (error_during_stream) {
        fprintf(stderr, "Stream error: %s\n", error_during_stream);
        return 1; // Stop streaming on error
    }
    if (token) {
        printf("%s", token);
    }
    if (is_final_chunk) {
        printf("\n[STREAM END]\n");
    }
    return 0; // Continue streaming
}

int main() {
    const char* api_key = getenv("OPENAI_API_KEY");
    if (!api_key) {
        fprintf(stderr, "OPENAI_API_KEY not set.\n");
        return 1;
    }

    dp_context_t* context = dp_init_context(DP_PROVIDER_OPENAI_COMPATIBLE, api_key, NULL);
    if (!context) {
        fprintf(stderr, "Failed to initialize context.\n");
        return 1;
    }

    dp_message_t message = { .role = DP_ROLE_USER };
    dp_message_add_text_part(&message, "Tell me a short story about a brave knight.");

    dp_request_config_t config = {
        .model = "gpt-4o-mini",
        .messages = &message,
        .num_messages = 1,
        .temperature = 0.7,
        .max_tokens = 100,
        .stream = true
    };

    dp_response_t response = {0};
    printf("Streaming completion:\n");
    int ret = dp_perform_streaming_completion(context, &config, stream_callback, NULL, &response);

    if (ret != 0) {
        fprintf(stderr, "Streaming completion failed to start: %s\n",
                response.error_message ? response.error_message : "(none)");
    } else if (response.http_status_code >= 400) {
        fprintf(stderr, "Streaming completion finished with HTTP error: %ld, Error: %s\n",
                response.http_status_code, response.error_message ? response.error_message : "(none)");
    }

    dp_free_response_content(&response);
    dp_free_messages(&message, 1);
    dp_destroy_context(context);

    return ret == 0 ? 0 : 1;
}
.fi

.SH BUGS
Please report any bugs or issues by opening a ticket on the GitHub issue tracker:
.PP
.UR https://github.com/segin/disasterparty/issues
.UE

.SH AUTHOR
Kirn Gill II <segin2005@gmail.com>
.br
Gemini (Conceptualization and initial C code generation)

.SH SEE ALSO
.BR dp_perform_completion (3),
.BR dp_perform_anthropic_streaming_completion (3),
.BR dp_request_config (3),
.BR disasterparty (7)
