.TH DP_FREE_FILE 3 "August 03, 2025" "Disaster Party" "Disaster Party API Documentation"
.SH NAME
dp_free_file \- free a Disaster Party file structure
.SH SYNOPSIS
.nf
#include <disasterparty.h>

void dp_free_file(dp_file_t *file);
.fi
.SH DESCRIPTION
Deallocates all memory associated with a \fBdp_file_t\fP structure that was previously allocated by \fBdp_upload_file\fP(3). Passing \fBNULL\fP is a safe no-op.
.SH PARAMETERS
.TP
\fIfile\fP
The \fBdp_file_t\fP structure to be freed.
.SH RETURN VALUE
None.
.SH BUGS
Please report any bugs or issues by opening a ticket on the GitHub issue tracker:
@PACKAGE_BUGREPORT@
.SH AUTHOR
Kirn Gill II <segin2005@gmail.com>
Gemini (Conceptualization and initial C code generation)
.SH EXAMPLE
.nf
#include <disasterparty.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    // Assume 'uploaded_file' was obtained from a successful dp_upload_file call
    dp_file_t* uploaded_file = (dp_file_t*)malloc(sizeof(dp_file_t));
    if (!uploaded_file) {
        fprintf(stderr, "Memory allocation failed.\n");
        return 1;
    }
    // In a real scenario, these would be populated by dp_upload_file
    uploaded_file->file_id = strdup("files/example-id");
    uploaded_file->display_name = strdup("example.txt");
    uploaded_file->mime_type = strdup("text/plain");
    uploaded_file->size_bytes = 100;
    uploaded_file->create_time = strdup("2025-07-03T12:00:00Z");
    uploaded_file->uri = strdup("https://example.com/files/example-id");

    printf("Freeing dp_file_t structure.\n");
    dp_free_file(uploaded_file);
    printf("dp_file_t structure freed.\n");

    return 0;
}
.fi

.SH SEE ALSO
.BR dp_upload_file (3)
